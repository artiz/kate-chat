name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write
  security-events: write
  actions: read

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY_BACKEND: katechat-backend
  ECR_REPOSITORY_FRONTEND: katechat-frontend
  ECR_REPOSITORY_RUST: katechat-backend-rust
  ECS_SERVICE_BACKEND: backend-service
  ECS_SERVICE_FRONTEND: frontend-service

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm run install:all

    - name: Run backend tests
      run: |
        cd backend
        npm test

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --watchAll=false
   
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm run install:all

    - name: Prettier backend
      run: |
        cd backend
        npx prettier -c .

    - name: Prettier frontend
      run: |
        cd frontend
        npx prettier -c .

    # TODO: Uncomment when Rust backend becomes active
    # - name: Setup Rust
    #   uses: actions-rust-lang/setup-rust-toolchain@v1
    #   with:
    #     toolchain: stable
    #     components: rustfmt, clippy
    # - name: Lint/Test Rust backend
    #   run: |
    #     cd backend-rust
    #     cargo fmt --check
    #     cargo clippy -- -D warnings
    #     cargo test
    

  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changes
      id: changes
      uses: dorny/paths-filter@v2
      with:
        filters: |
          backend:
            - 'backend/**'
            - 'package.json'
            - 'docker-compose.yaml'
          frontend:
            - 'frontend/**'
            - 'package.json'
            - 'docker-compose.yaml'

  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [test, lint, changes]
    # TODO: Remove if when feature branch cleanup be implemented
    if: github.ref == 'refs/heads/master' && (needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true')
    
    outputs:
      backend-image: ${{ steps.build-backend.outputs.image }}
      frontend-image: ${{ steps.build-frontend.outputs.image }}
      # rust-image: ${{ steps.build-rust.outputs.image }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Build and push frontend image
      id: build-frontend
      if: needs.changes.outputs.frontend == 'true'
      env:
        APP_API_URL: "/"
        APP_WS_URL: "/"
        RECAPTCHA_SITE_KEY: ${{ secrets.RECAPTCHA_SITE_KEY }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |

        BRANCH_NAME=$(echo ${{ github.head_ref || github.ref_name }} | tr '[:upper:]' '[:lower:]' | sed 's/\//-/g')
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$BRANCH_NAME\
          --build-arg APP_API_URL=$APP_API_URL\
          --build-arg APP_WS_URL=$APP_WS_URL\
          --build-arg RECAPTCHA_SITE_KEY=$RECAPTCHA_SITE_KEY\
          ./ -f frontend/Dockerfile
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$BRANCH_NAME
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$BRANCH_NAME" >> $GITHUB_OUTPUT
    
    # Build and push backend image
    - name: Build and push backend image
      id: build-backend
      if: needs.changes.outputs.backend == 'true'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        BRANCH_NAME=$(echo ${{ github.head_ref || github.ref_name }} | tr '[:upper:]' '[:lower:]' | sed 's/\//-/g')
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$BRANCH_NAME ./ -f backend/Dockerfile
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$BRANCH_NAME
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$BRANCH_NAME" >> $GITHUB_OUTPUT

    # TODO: Uncomment when Rust backend becomes active
    # - name: Build and push Rust backend image
    #   id: build-rust
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_RUST:$IMAGE_TAG backend-rust/
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY_RUST:$IMAGE_TAG
    #     echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_RUST:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, changes]
    if: github.ref == 'refs/heads/master' && (needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to ECS Staging
      run: |
        # Update ECS service with new images
        aws ecs update-service \
          --cluster katechat-staging-cluster \
          --service katechat-staging-${{ env.ECS_SERVICE_BACKEND }} \
          --force-new-deployment
        
        aws ecs update-service \
          --cluster katechat-staging-cluster \
          --service katechat-staging-${{ env.ECS_SERVICE_FRONTEND }} \
          --force-new-deployment

        # Wait for deployment to complete
        # aws ecs wait services-stable \
        #   --cluster katechat-staging-cluster \
        #   --services katechat-staging-${{ env.ECS_SERVICE_BACKEND }}

    - name: Get Load Balancer DNS
      id: get-lb-dns
      run: |
        # Get the load balancer DNS name
        LB_DNS=$(aws elbv2 describe-load-balancers \
          --names katechat-staging-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text 2>/dev/null || echo "")
        
        if [ -n "$LB_DNS" ] && [ "$LB_DNS" != "None" ]; then
          DEMO_URL="http://$LB_DNS/"
          echo "demo-url=$DEMO_URL" >> $GITHUB_OUTPUT
          echo "✅ Found load balancer DNS: $LB_DNS"
        else
          echo "⚠️ Could not retrieve load balancer DNS"
          echo "demo-url=" >> $GITHUB_OUTPUT
        fi

    - name: Update README with new demo URL
      if: steps.get-lb-dns.outputs.demo-url != ''
      run: |
        DEMO_URL="${{ steps.get-lb-dns.outputs.demo-url }}"
        echo "Updating README with demo URL: $DEMO_URL"
        
        # Update the demo URL in README.md
        sed -i "s|**\[Try KateChat Demo →\]([^)]*)**|**[Try KateChat Demo →]($DEMO_URL)**|g" README.md
        
        # Check if changes were made
        if git diff --quiet README.md; then
          echo "No changes needed in README.md"
        else
          echo "README.md updated with new demo URL"
          echo "readme-updated=true" >> $GITHUB_OUTPUT
        fi

    - name: Commit and push README changes
      if: steps.get-lb-dns.outputs.demo-url != ''
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are changes to commit
        if ! git diff --quiet README.md; then
          git add README.md
          git commit -m "🚀 Update demo URL after deployment
          
          Auto-updated demo link to: ${{ steps.get-lb-dns.outputs.demo-url }}
          
          Deployed from commit: ${{ github.sha }}"
          
          # Push changes
          git push
          echo "✅ README.md updated and committed"
        else
          echo "ℹ️ No README.md changes to commit"
        fi

    - name: Deployment Summary
      if: always()
      run: |
        echo "🚀 Staging Deployment Complete!"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🔧 Services Updated:"
        echo "  • Backend: katechat-staging-${{ env.ECS_SERVICE_BACKEND }}"
        echo "  • Frontend: katechat-staging-${{ env.ECS_SERVICE_FRONTEND }}"
        echo ""
        if [ -n "${{ steps.get-lb-dns.outputs.demo-url }}" ]; then
          echo "🌐 Demo URL: ${{ steps.get-lb-dns.outputs.demo-url }}"
          echo "📝 README.md: Updated with latest demo link"
        else
          echo "⚠️  Demo URL: Could not retrieve load balancer DNS"
        fi
        echo "📦 Commit: ${{ github.sha }}"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

  # deploy-production:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/master'
  #   environment: production
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{ env.AWS_REGION }}

  #   - name: Deploy to ECS Production
  #     run: |
  #       # Update ECS service with new images
  #       aws ecs update-service \
  #         --cluster ${{ env.ECS_CLUSTER }} \
  #         --service ${{ env.ECS_SERVICE_BACKEND }} \
  #         --force-new-deployment
        
  #       # Wait for deployment to complete
  #       aws ecs wait services-stable \
  #         --cluster ${{ env.ECS_CLUSTER }} \
  #         --services ${{ env.ECS_SERVICE_BACKEND }}

  #   - name: Notify deployment success
  #     if: success()
  #     run: |
  #       echo "✅ Production deployment successful!"
  #       echo "Backend: ${{ needs.build.outputs.backend-image }}"
  #       echo "Frontend: ${{ needs.build.outputs.frontend-image }}"
  #       echo "Rust Backend: ${{ needs.build.outputs.rust-image }}"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build, changes]
    if: github.ref == 'refs/heads/master' && (needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true')
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Print scan summary
      if: always()
      run: |
        echo "Security scan completed."
        if [ -f trivy-results.sarif ]; then
          echo "SARIF results generated successfully."
        else
          echo "No SARIF results found."
        fi
