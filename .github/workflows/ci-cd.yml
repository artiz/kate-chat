name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write
  security-events: write
  actions: read

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY_APP: katechat-app
  ECR_REPOSITORY_DOCUMENT_PROCESSOR: katechat-document-processor
  ECS_SERVICE_APP: app-service
  ECS_SERVICE_DOCUMENT_PROCESSOR: document-processor-service

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: |
        npm test -- --watchAll=false
   
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Prettier API
      run: |
        cd api
        npx prettier -c .

    - name: Prettier client
      run: |
        cd client
        npx prettier -c .

    # - name: Setup Rust
    #   uses: actions-rust-lang/setup-rust-toolchain@v1
    #   with:
    #     toolchain: stable
    #     components: rustfmt, clippy
    # - name: Lint/Test Rust API
    #   run: |
    #     cd api-rust
    #     cargo fmt --check
    #     cargo clippy -- -D warnings
    #     cargo test
    
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.changes.outputs.api }}
      client: ${{ steps.changes.outputs.client }}
      packages: ${{ steps.changes.outputs.packages }}
      document_processor: ${{ steps.changes.outputs.document_processor }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changes
      id: changes
      uses: dorny/paths-filter@v2
      with:
        filters: |
          api:
            - 'api/**'
            - 'package.json'
            - 'package-lock.json'
            - 'docker-compose.yaml'
            - 'infrastructure/services/katechat-app/**'
            - 'db-migrations/**'
          client:
            - 'client/**'
            - 'packages/katechat-ui/**'
            - 'package.json'
            - 'package-lock.json'
            - 'docker-compose.yaml'
          packages:
            - 'packages/**'
            - 'package.json'
            - 'package-lock.json'
          document_processor:
            - 'document-processor/**'
            - 'infrastructure/services/katechat-document-processor/**'
          docs:
            - 'docs/**'
            - 'README.md'
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [test, lint, changes]
    if: needs.changes.outputs.api == 'true' || needs.changes.outputs.client == 'true' || needs.changes.outputs.document_processor == 'true'

    outputs:
      app-image: ${{ steps.build-app.outputs.image }}
      document-processor-image: ${{ steps.build-document-processor.outputs.image }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'
    
    # Build and push app image
    - name: Build and push app image
      id: build-app
      if: needs.changes.outputs.api == 'true' || needs.changes.outputs.client == 'true'
      env:
        APP_API_URL: "/"
        APP_WS_URL: "/"
        RECAPTCHA_SITE_KEY: ${{ secrets.RECAPTCHA_SITE_KEY }}
        COMMIT_SHA: ${{ github.sha }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        BRANCH_NAME=$(echo ${{ github.head_ref || github.ref_name }} | tr '[:upper:]' '[:lower:]' | sed 's/\//-/g')

        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_APP:$BRANCH_NAME\
          --build-arg APP_API_URL=$APP_API_URL\
          --build-arg APP_WS_URL=$APP_WS_URL\
          --build-arg RECAPTCHA_SITE_KEY=$RECAPTCHA_SITE_KEY\
          --build-arg COMMIT_SHA=$COMMIT_SHA\
          ./ -f infrastructure/services/katechat-app/Dockerfile
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_APP:$BRANCH_NAME
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_APP:$BRANCH_NAME" >> $GITHUB_OUTPUT
    
    # Build and push document-processor image
    - name: Build and push document-processor image
      id: build-document-processor
      if: needs.changes.outputs.document_processor == 'true'
      env:
        COMMIT_SHA: ${{ github.sha }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        BRANCH_NAME=$(echo ${{ github.head_ref || github.ref_name }} | tr '[:upper:]' '[:lower:]' | sed 's/\//-/g')

        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_DOCUMENT_PROCESSOR:$BRANCH_NAME\
          --build-arg COMMIT_SHA=$COMMIT_SHA\
          ./ -f infrastructure/services/katechat-document-processor/Dockerfile
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_DOCUMENT_PROCESSOR:$BRANCH_NAME
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_DOCUMENT_PROCESSOR:$BRANCH_NAME" >> $GITHUB_OUTPUT
    
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, changes]
    if: github.ref == 'refs/heads/master' && (needs.changes.outputs.api == 'true' || needs.changes.outputs.client == 'true' || needs.changes.outputs.document_processor == 'true')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to ECS Staging
      run: |
        # Update ECS service with new images
        aws ecs update-service \
          --cluster katechat-staging-cluster \
          --service katechat-staging-${{ env.ECS_SERVICE_APP }} \
          --force-new-deployment
        
        # Update document processor service if it was changed
        if [ "${{ needs.changes.outputs.document_processor }}" = "true" ]; then
          aws ecs update-service \
            --cluster katechat-staging-cluster \
            --service katechat-staging-${{ env.ECS_SERVICE_DOCUMENT_PROCESSOR }} \
            --force-new-deployment
        fi
        
        # Wait for deployment to complete
        # aws ecs wait services-stable \
        #   --cluster katechat-staging-cluster \
        #   --services katechat-staging-${{ env.ECS_SERVICE_APP }}

    - name: Deployment Summary
      if: always()
      run: |
        echo "🚀 Staging Deployment Complete!"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🔧 Services Updated:"
        echo "🚡 App: katechat-staging-${{ env.ECS_SERVICE_APP }}"
        if [ "${{ needs.changes.outputs.document_processor }}" = "true" ]; then
          echo "📄 Document Processor: katechat-staging-document-processor-service"
        fi
        echo "📦 Commit: ${{ github.sha }}"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

  publish-ui-package:
    name: Publish @katechat/ui to NPM
    runs-on: ubuntu-latest
    needs: [changes]
    if: github.ref == 'refs/heads/master' && needs.changes.outputs.packages == 'true'
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Install dependencies
      run: |
        cd packages/katechat-ui
        npm install

    - name: Build package
      run: |
        cd packages/katechat-ui
        npm run build

    - name: Run tests
      run: |
        cd packages/katechat-ui
        npm test
        npx prettier -c .

    - name: Bump version
      run: |
        cd packages/katechat-ui
        npm version patch

        NEW_VERSION=$(node -p "require('./package.json').version")
        git commit -a -m "chore: bump @katechat/ui version to $NEW_VERSION [skip ci]"
        git push origin HEAD:master --follow-tags
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

    - name: Publish to NPM
      run: |
        cd packages/katechat-ui
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Publication Summary
      if: always()
      run: |
        echo "📦 NPM Package Publication Complete!"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "📦 Package: @katechat/ui"
        echo "� Version: ${{ env.NEW_VERSION }}"
        echo "�📄 Commit: ${{ github.sha }}"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "🔗 NPM: https://www.npmjs.com/package/@katechat/ui"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build, changes]
    if: github.ref == 'refs/heads/master' && (needs.changes.outputs.api == 'true' || needs.changes.outputs.client == 'true' || needs.changes.outputs.document_processor == 'true')
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Print scan summary
      if: always()
      run: |
        echo "Security scan completed."
        if [ -f trivy-results.sarif ]; then
          echo "SARIF results generated successfully."
        else
          echo "No SARIF results found."
        fi
