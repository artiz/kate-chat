# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthResponse {
  token: String!
  user: User!
}

type Chat {
  createdAt: DateTimeISO!
  description: String!
  id: ID!
  isActive: Boolean!
  isPristine: Boolean!
  modelId: String
  title: String!
  updatedAt: DateTimeISO!
  user: User!
}

type ChatsResponse {
  chats: [Chat!]
  error: String
  hasMore: Boolean!
  total: Float
}

input CreateChatInput {
  description: String
  modelId: String
  title: String!
}

input CreateMessageInput {
  chatId: String!
  content: String!
  modelId: String
  role: String! = "user"
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input GetChatsInput {
  limit: Float = 20
  offset: Float = 0
  searchTerm: String
}

input GetMessagesInput {
  chatId: String!
  limit: Float = 20
  offset: Float = 0
}

input LoginInput {
  email: String!
  password: String!
}

type Message {
  chat: Chat!
  chatId: String!
  content: String!
  createdAt: DateTimeISO!
  id: ID!
  modelId: String!
  modelName: String
  role: String!
  updatedAt: DateTimeISO!
  user: User!
}

type MessageResponse {
  error: String
  message: Message
  type: String!
}

type MessagesResponse {
  chat: Chat
  error: String
  hasMore: Boolean!
  messages: [Message!]
  total: Float
}

type ModelResponse {
  apiType: String!
  createdAt: DateTimeISO!
  description: String!
  id: ID!
  isActive: Boolean!
  isDefault: Boolean!
  modelArn: String
  modelId: String!
  name: String!
  provider: String
  sortOrder: Float!
  supportsEmbeddingsIn: Boolean!
  supportsImageIn: Boolean!
  supportsImageOut: Boolean!
  supportsStreaming: Boolean!
  supportsTextIn: Boolean!
  supportsTextOut: Boolean!
  updatedAt: DateTimeISO!
}

type ModelsResponse {
  error: String
  models: [ModelResponse!]
  total: Float
}

type Mutation {
  createChat(input: CreateChatInput!): Chat!
  createMessage(input: CreateMessageInput!): Message!
  deleteChat(id: ID!): Boolean!
  deleteMessage(id: String!): Boolean!
  login(input: LoginInput!): AuthResponse!
  register(input: RegisterInput!): AuthResponse!
  reloadModels: ModelsResponse!
  testModel(input: TestModelInput!): String!
  updateChat(id: ID!, input: UpdateChatInput!): Chat!
  updateModelStatus(input: UpdateModelStatusInput!): ModelResponse!
}

type Query {
  currentUser: User
  getActiveModels: [ModelResponse!]!
  getChatById(id: ID!): Chat
  getChatMessages(input: GetMessagesInput!): MessagesResponse!
  getChats(input: GetChatsInput): ChatsResponse!
  getMessageById(id: String!): Message
  getModels: ModelsResponse!
}

input RegisterInput {
  avatarUrl: String
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type Subscription {
  newMessage(chatId: String!): MessageResponse!
}

input TestModelInput {
  modelId: String!
  text: String! = "2+2="
}

input UpdateChatInput {
  description: String
  isActive: Boolean
  modelId: String
  title: String
}

input UpdateModelStatusInput {
  isActive: Boolean!
  modelId: String!
}

type User {
  avatarUrl: String
  createdAt: DateTimeISO!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  msalId: String
  updatedAt: DateTimeISO!
}