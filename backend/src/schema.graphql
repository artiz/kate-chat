# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type ApplicationConfig {
  demoMode: Boolean!
  maxChatMessages: Float
  maxChats: Float
  maxImages: Float
  s3Connected: Boolean
}

type AuthResponse {
  token: String!
  user: User!
}

type Chat {
  createdAt: DateTimeISO!
  description: String!
  id: ID!
  isPristine: Boolean!
  lastBotMessage: String
  lastBotMessageId: String
  maxTokens: Float
  messages: [Message!]
  messagesCount: Float
  modelId: String
  temperature: Float
  title: String!
  topP: Float
  updatedAt: DateTimeISO!
  user: User
}

input CreateChatInput {
  description: String
  modelId: String
  systemPrompt: String
  title: String!
}

input CreateMessageInput {
  chatId: String!
  content: String!
  images: [ImageInput!]
  maxTokens: Float
  modelId: String
  role: String! = "user"
  temperature: Float
  topP: Float
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input GetChatsInput {
  limit: Float = 20
  offset: Float = 0
  searchTerm: String
}

input GetCostsInput {
  apiProvider: String!
  endTime: Float
  startTime: Float!
}

input GetMessagesInput {
  chatId: String!
  limit: Float = 20
  offset: Float = 0
}

type GqlAmount {
  amount: Float!
  currency: String!
}

type GqlChatsList {
  chats: [Chat!]
  error: String
  hasMore: Boolean!
  total: Float
}

type GqlCostsInfo {
  costs: [GqlServiceCostInfo!]!
  end: DateTimeISO
  error: String
  start: DateTimeISO!
}

type GqlMessage {
  error: String
  message: Message
  streaming: Boolean
  type: String!
}

type GqlMessagesList {
  chat: Chat
  error: String
  hasMore: Boolean!
  messages: [Message!]
  total: Float
}

type GqlModel {
  apiProvider: String!
  createdAt: DateTimeISO!
  description: String!
  id: ID!
  isActive: Boolean!
  isCustom: Boolean!
  modelId: String!
  name: String!
  provider: String
  supportsEmbeddingsIn: Boolean!
  supportsEmbeddingsOut: Boolean!
  supportsImageIn: Boolean!
  supportsImageOut: Boolean!
  supportsStreaming: Boolean!
  supportsTextIn: Boolean!
  supportsTextOut: Boolean!
  updatedAt: DateTimeISO!
  user: User!
}

type GqlModelsList {
  error: String
  models: [GqlModel!]
  providers: [GqlProviderInfo!]
  total: Float
}

type GqlProviderInfo {
  costsInfoAvailable: Boolean!
  details: [ProviderDetail!]!
  id: String!
  isConnected: Boolean!
  name: String!
}

type GqlServiceCostInfo {
  amounts: [GqlAmount!]!
  name: String!
  type: String!
}

input ImageInput {
  bytesBase64: String!
  fileName: String!
  mimeType: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Message {
  chat: Chat!
  chatId: String
  content: String!
  createdAt: DateTimeISO!
  id: ID!
  modelId: String!
  modelName: String
  role: String!
  updatedAt: DateTimeISO!
  user: User
}

type Model {
  apiProvider: String!
  createdAt: DateTimeISO!
  description: String!
  id: ID!
  isActive: Boolean!
  isCustom: Boolean!
  modelId: String!
  name: String!
  provider: String
  supportsEmbeddingsIn: Boolean!
  supportsEmbeddingsOut: Boolean!
  supportsImageIn: Boolean!
  supportsImageOut: Boolean!
  supportsStreaming: Boolean!
  supportsTextIn: Boolean!
  supportsTextOut: Boolean!
  updatedAt: DateTimeISO!
  user: User!
}

type Mutation {
  createChat(input: CreateChatInput!): Chat!
  createMessage(input: CreateMessageInput!): Message!
  deleteChat(id: ID!): Boolean!
  deleteMessage(deleteFollowing: Boolean, id: ID!): [ID!]!
  login(input: LoginInput!): AuthResponse!
  register(input: RegisterInput!): AuthResponse!
  reloadModels: GqlModelsList!
  testModel(input: TestModelInput!): Message!
  updateChat(id: ID!, input: UpdateChatInput!): Chat!
  updateModelStatus(input: UpdateModelStatusInput!): GqlModel!
  updateUser(input: UpdateUserInput!): User!
}

type ProviderDetail {
  key: String!
  value: String!
}

type Query {
  appConfig: ApplicationConfig
  currentUser: User
  getActiveModels: [GqlModel!]!
  getChatById(id: ID!): Chat
  getChatMessages(input: GetMessagesInput!): GqlMessagesList!
  getChats(input: GetChatsInput): GqlChatsList!
  getCosts(input: GetCostsInput!): GqlCostsInfo!
  getMessageById(id: String!): Message
  getModels: GqlModelsList!
  refreshToken: AuthResponse!
}

input RegisterInput {
  authProvider: String
  avatarUrl: String
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  recaptchaToken: String
}

type Subscription {
  newMessage(chatId: String!): GqlMessage!
}

input TestModelInput {
  modelId: String!
  text: String! = "2+2="
}

input UpdateChatInput {
  description: String
  maxTokens: Float
  modelId: String
  temperature: Float
  title: String
  topP: Float
}

input UpdateModelStatusInput {
  isActive: Boolean!
  modelId: String!
}

input UpdateUserInput {
  avatarUrl: String
  defaultModelId: String
  defaultSystemPrompt: String
  email: String
  firstName: String
  lastName: String
}

type User {
  authProvider: String
  avatarUrl: String
  createdAt: DateTimeISO!
  defaultModelId: String
  defaultSystemPrompt: String
  email: String!
  firstName: String!
  githubId: String
  googleId: String
  id: ID!
  lastName: String!
  models: [Model!]
  updatedAt: DateTimeISO!
}